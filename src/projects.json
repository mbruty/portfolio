[
  {
    "name": "Sorting Algorithm Visualiser",
    "shortName": "Sorting Vis",
    "icon": "assessment",
    "description": "asdf",
    "language": "js, javascript, react, css, HTML",
    "url": "https://github.com/mbruty/Sorting-visualiser",
    "image": [],
    "info": "This program does what it says on the tin. Visualises Sorting algorithms!\n## How does it work?\nThere is a random array generated of a given length. This array contains numbers from 1 - 100.\nThe graph component is fed this array, and renders each bar, with the value set to the height % e.g an element of value 43.6 will have it's height set to 43.6% of the container.\nWhen the sort is started, the sorting algorithm is passed the 'setState' of the graph component, every time the algorithm does a swap, the graph component is fed the new array and re-renders the new array. If there is a delay specified, the algorithm will then wait for that amount of time before continuing.\n## Speed test\nThis just uses the bare sorting algorithm, without any callback or delay. A random array is generated, this array is then duplicated to each algorithm and then they're set off! Each algorithm is assigned to a new web-worker to ensure that the results aren't skewed due to any processing having to happen on the main thread. This also stops the page from becoming un-responsive. Once each algorithm has completed it's run, it talks back to the main thread to give it's result. Once all the results have been collected, the page updates to show the result ",
    "material": true
  },
  {
    "name": "URL Shortener",
    "shortName": "URL Shortener",
    "icon": "link",
    "language": "js, javascript, react, css, Mongo, MongoDB, HTML",
    "url": "https://github.com/mbruty/React-link-shortener",
    "image": [],
    "info": "This app does exactly that. It takes a url and a slug, stores it and re-direct's any requests from that slug to the url... But how?\nThe *domain name*/u/*slug* route triggers a request to a mongodb server to fetch the stored url for the slug.\nThe mongodb database is just used as a key/value pair database, so other services like redis could also be used or even a SQL server with one table and a column for the slug and url!\nOnce the url has been obtained, the request is then redirected to the target url.\nIf the slug isn't found, the user is forwarded to a 404 page.\nOn a POST to the back-end, the chosen slug is checked against the database to ensure it hasn't already been taken, if it hasn't the url is stored with the slug for later use.",
    "material": true
  },
  {
    "name": "Recursion Example",
    "shortName": "Recursion Example",
    "icon": "cached",
    "language": "js, javascript, HTML, css",
    "url": "https://github.com/mbruty/portfolio",
    "info": "#maximum recursion depth exceeded",
    "image": [],
    "material": true
  },
  {
    "name": "Starwars Guild Inspector (Example Allycodes in the read me)",
    "shortName": "Starwars Guild Inspector",
    "icon": "swg swg-deathstar swg-4x",
    "littleIcon": "swg swg-deathstar swg-2x",
    "language": "js, javascript, react, css, redis, HTML, sockets, socket.io, websockets, formik",
    "url": "https://github.com/mbruty/swgoh-tw",
    "image": [],
    "info": "# SWGOH Guild Inspector\n## Example ally codes => \n\n-   979-382-945\n-   841-626-362\n-   291-422-326\n- 427-513-365\n\n## How it works?\n\n 1. You submit an ally-code, this is passed over to the api to process.\n 2. The api hit's a public api to get all the information about that ally-code (returns a list of all of the ally-codes in that guild. (This can take a few minutes due to the massive amount of traffic on the public api)\n 3. The api fetches all of the data for all of the members of that guild.\n 4. The api processes all of the information, searching each member for the 'meta' squads that they have and sorts the squads based on the highest power.\n 5. The api caches this data in a redis database for 6 hours to avoid spamming the public api.\n 6. The react app displays all of this information.\n\n## What is used?\n- Socket.io for the api (so that user-feedback can be implemented due to requests taking multiple minutes at peek times, noting I can do)\n- Redis for caching all the data\n- Express.js for the HTTP server\n- React.js for the website\n- Material-ui for most of the components\n- Sass for styling\n- Formik for the validation",
    "material": false
  }
]
